#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_PATH_LEN 1024

// Define a structure to represent an inode
typedef struct inode {
    char name[256];
    int type; // 0 for file, 1 for directory
    struct inode *children;
} inode_t;

// Define a helper function to create a new inode
inode_t *new_inode(char *name, int type) {
    inode_t *new_node = (inode_t*) malloc(sizeof(inode_t));
    strcpy(new_node->name, name);
    new_node->type = type;
    new_node->children = NULL;
    return new_node;
}

// Define a helper function to add a child inode to a directory inode
void add_child(inode_t *parent, inode_t *child) {
    child->children = parent->children;
    parent->children = child;
}

// Define a helper function to search for a child inode by name
inode_t *find_child(inode_t *parent, char *name) {
    inode_t *current = parent->children;
    while (current != NULL) {
        if (strcmp(current->name, name) == 0) {
            return current;
        }
        current = current->children;
    }
    return NULL;
}

// Define a helper function to print the path of a given inode
void print_path(inode_t *node) {
    if (node == NULL) {
        return;
    }
    print_path(node->children);
    printf("/%s", node->name);
}

// Define the main function for the namei algorithm
int main() {
    // Set up the root inode
    inode_t *root = new_inode("", 1);

    // Add some example files and directories
    add_child(root, new_inode("usr", 1));
    add_child(root, new_inode("bin", 1));
    add_child(root, new_inode("var", 1));

    inode_t *usr_node = find_child(root, "usr");
    add_child(usr_node, new_inode("local", 1));
    add_child(usr_node, new_inode("share", 1));

    inode_t *local_node = find_child(usr_node, "local");
    add_child(local_node, new_inode("bin", 1));
    add_child(local_node, new_inode("lib", 1));

    // Get the path from the user
    char path[MAX_PATH_LEN];
    printf("Enter path: ");
    scanf("%s", path);

    // Traverse the path and print the result
    inode_t *current = root;
    char *token = strtok(path, "/");
    while (token != NULL) {
        inode_t *next = find_child(current, token);
        if (next == NULL) {
            printf("Path not found.\n");
            return 0;
        }
        current = next;
        token = strtok(NULL, "/");
    }
    if (current->type == 0) {
        printf("Found file at path:");
    } else {
        printf("Found directory at path:");
    }
    print_path(current);
    printf("\n");

    return 0;
}
